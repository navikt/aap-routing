info:
    nais:
        clientid: ${nais.client.id}
        project: ${gcp.team.project.id}
        cluster: ${nais.cluster.name}
        image: ${nais.app.image}
        app: ${nais.app.name}
        namespace: ${nais.namespace}

resilience4j:
    retry:
        instances:
            graphql:
                max-attempts: 3
                waitDuration: 100ms
                ignoreExceptions:
                    - no.nav.aap.fordeling.graphql.GraphQLExtensions.UnrecoverableGraphQL
spring:
    cache:
        cache-names: navorg
        caffeine:
          spec: maximumSize=1,expireAfterAccess=3600s
    cloud:
        gcp:
            project-id: ${gcp.team.project.id}
    codec:
        max-in-memory-size: 50MB
    devtools:
        restart:
            enabled: false
        add-properties: false
        livereload:
            enabled: false
    kafka:
        bootstrap-servers: ${kafka.brokers}
        properties:
            basic:
                auth:
                    user:
                        info: ${kafka.schema.registry.user}:${kafka.schema.registry.password}
                    credentials:
                        source: USER_INFO
            schema:
                registry:
                    url: ${kafka.schema.registry}
            ssl:
              endpoint:
                identification:
                    algorithm: ''
        security:
            protocol: SSL
        ssl:
            trust-store-location: file:${kafka.truststore.path}
            trust-store-type: JKS
            trust-store-password: ${kafka.credstore.password}
            key-store-location: file:${kafka.keystore.path}
            key-store-type: PKCS12
            key-store-password: ${kafka.credstore.password}
        consumer:
            group-id: ${spring.application.name}-${env}
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
            properties:
                specific:
                    avro:
                        reader: true
        producer:
            client-id: ${spring.application.name}
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            acks: 1

no.nav:
    security:
        jwt:
            client:
                registration:
                    egenansatt:
                        token-endpoint-url: ${azure.openid.config.token.endpoint}
                        grant-type: client_credentials
                        scope: ${egenansatt.scope}
                        authentication:
                            client-id: ${azure.app.client.id}
                            client-jwk: ${azure.app.jwk}
                            client-auth-method: private_key_jwt
                    oppgave:
                        token-endpoint-url: ${azure.openid.config.token.endpoint}
                        grant-type: client_credentials
                        scope: ${oppgave.scope}
                        authentication:
                            client-id: ${azure.app.client.id}
                            client-jwk: ${azure.app.jwk}
                            client-auth-method: private_key_jwt
                    pdl:
                        token-endpoint-url: ${azure.openid.config.token.endpoint}
                        grant-type: client_credentials
                        scope: ${pdl.scope}
                        authentication:
                            client-id: ${azure.app.client.id}
                            client-jwk: ${azure.app.jwk}
                            client-auth-method: private_key_jwt
                    joark:
                        token-endpoint-url: ${azure.openid.config.token.endpoint}
                        grant-type: client_credentials
                        scope: ${joark.scope}
                        authentication:
                            client-id: ${azure.app.client.id}
                            client-jwk: ${azure.app.jwk}
                            client-auth-method: private_key_jwt
                    dokarkiv:
                        token-endpoint-url: ${azure.openid.config.token.endpoint}
                        grant-type: client_credentials
                        scope: ${joark.dokarkivscope}
                        authentication:
                            client-id: ${azure.app.client.id}
                            client-jwk: ${azure.app.jwk}
                            client-auth-method: private_key_jwt

navorg:
    base-uri: https://norg2.${env}-fss-pub.nais.io
    enabled: true
egenansatt:
    enabled: true
    base-uri: http://skjermede-personer-pip.nom
    scope: api://${env}-gcp.nom.skjermede-personer-pip/.default
joark:
    dokarkiv: https://dokarkiv.${env}-fss-pub.nais.io
    enabled: true
    base-uri: https://saf.${env}-fss-pub.nais.io/graphql
oppgave:
    enabled: true
pdl:
    enabled: true
    base-uri: https://pdl-api.${env}-fss-pub.nais.io/graphql
    scope: api://${env}-fss.pdl.pdl-api/.default
arena:
    enabled: true
    base-uri: https://aap-fss-proxy.${env}-fss-pub.nais.io
fordeling:
    retries: 1
    backoff: 1000
    routing:
       aap:
          brevkoder:
             - 'NAV 11-13.05'
             - 'NAVe 11-13.05'